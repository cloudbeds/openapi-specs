{
  "openapi": "3.0.1",
  "info": {
    "title": "Accounting service API",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://api.{environment}.com",
      "variables": {
        "environment": {
          "default": "cloudbeds-stage",
          "enum": [
            "cloudbeds-stage",
            "cloudbeds"
          ]
        }
      }
    },
    {
      "url": "https://api.{island}.{environment}.com",
      "variables": {
        "island": {
          "default": "us2",
          "enum": [
            "us2"
          ]
        },
        "environment": {
          "default": "cloudbeds-stage",
          "enum": [
            "cloudbeds-stage",
            "cloudbeds"
          ]
        }
      }
    },
    {
      "url": "http://localhost:8000/accounting/v1.0",
      "description": "Local Host"
    }
  ],
  "paths": {
    "/accounting/v1.0/deposits/transfer": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Deposits"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDepositPostRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "postDepositsTransfer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncEventResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerFilter"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "getAccountsReceivableLedgers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerPaginated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountsReceivableLedgerPostRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "postAccountsReceivableLedger",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountsReceivableLedgerPatchRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "patchAccountsReceivableLedger",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers/{accountsReceivableLedgerId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "getAccountsReceivableLedgerById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers/{accountsReceivableLedgerId}/transactions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerId"
          },
          {
            "$ref": "#/components/parameters/TransactionState"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "page token"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Size of the page"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerTransactionsFilter"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "getAccountsReceivableLedgerTransactions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedTransactionPaginated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers/totals": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/GetAccountsReceivableLedgerTotalsFilterParameter"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "getAccountsReceivableLedgerTotals",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerTotalsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers/{accountsReceivableLedgerId}/reservation/{reservationId}/balance-transfer": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "postAccountsReceivableLedgerReservationBalanceTransfer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncEventResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/accountsReceivableLedgerId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "deleteAccountsReceivableLedgerReservationBalanceTransfer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncEventResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/accounting/v1.0/accounts-receivable-ledgers/reservation/{reservationId}/balance-transfer": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts Receivable Ledger"
        ],
        "operationId": "getAccountsReceivableLedgerReservationBalanceTransfer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsReceivableLedgerReservationBalanceTransferResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/custom-general-ledger-codes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "getCustomGeneralLedgerCodes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Custom General Ledger Codes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomGeneralLedgerCodeModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      },
      "put": {
        "description": "Create or update General Ledger Codes.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomGeneralLedgerCodesUpdateRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "putCustomGeneralLedgerCodes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Custom General Ledger Codes"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/custom-transaction-codes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "getCustomTransactionCodes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Custom Transaction Codes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomTransactionCodesModel"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      },
      "put": {
        "description": "Update custom transaction code mappings. Optional custom general ledger code can also be assigned.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomTransactionCodesUpdateRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "putCustomTransactionCodes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Custom Transaction Codes"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/custom-transaction-codes/initialize": {
      "description": "Before transaction custom codes can be retrieved and modified, they must be initialized. This process generates transaction custom code records without any mapping. Once the initialization is complete, the codes can be retrieved and modified.\n",
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "initializeCustomTransactionCodes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Custom Transaction Codes"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/transactions": {
      "post": {
        "description": "Supported fields for filtering:\n  - id\n  - internal_code\n  - custom_code\n  - transaction_datetime\n  - customer_id\n  - source_id\n  - source_kind\n  - external_relation_id\n  - external_relation_kind\n  - origin_id\n  - routed_from\n  - created_at\n  - parent_id\n  - folio_id\n  - custom_code\n  - account_category\n  - chart_of_account_type\n\nSupported fields for sorting:\n  - id\n  - internal_code\n  - transaction_datetime\n  - source_id\n  - created_at\n\nExample request:\n```\n  {\n    \"filters\": {\n      \"and\": [\n        {\n          \"operator\": \"greater_than_or_equal\",\n          \"value\": \"2019-01-11t08:59:00z\",\n          \"field\": \"transaction_datetime\"\n        },\n        {\n          \"or\": [\n            {\n              \"operator\": \"equals\",\n              \"value\": \"1\",\n              \"field\": \"customer_id\"\n            },\n            {\n              \"operator\": \"equals\",\n              \"value\": \"2\",\n              \"field\": \"customer_id\"\n            },\n            {\n              \"operator\": \"equals\",\n              \"value\": \"3\",\n              \"field\": \"customer_id\"\n            }\n          ]\n        }\n      ]\n    },\n    \"pageToken\": null,\n    \"limit\": 10,\n    \"sort\": [\n      {\n        \"field\": \"transaction_datetime\",\n        \"direction\": \"asc\"\n      }\n    ]\n  }\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListTransactionsRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "listTransactions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionsPaginated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/trial-balance/configuration/status": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "isTrialBalanceConfigured",
        "description": "Returns information if property has configured trial balance report.\n",
        "tags": [
          "Trial balance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrialBalanceConfigurationStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounting/v1.0/trial-balance/configuration/calculate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "calculateTrialBalance",
        "description": "Get initial Trial Balance based transaction records (till end of yesterday in property time)\n",
        "tags": [
          "Trial balance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrialBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounting/v1.0/trial-balance/configuration": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "operationId": "getTrialBalanceConfiguration",
        "description": "Get configured trial balance.\n",
        "tags": [
          "Trial balance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrialBalanceResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "setTrialBalance",
        "description": "Configure trial balance for property by saving opening balances for today.\nFail if trial balance configuration already exists.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          }
        ],
        "tags": [
          "Trial balance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrialBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingError"
                }
              }
            }
          }
        }
      }
    },
    "/accounting/v1.0/deposits/balance": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "description": "Source Id"
            }
          },
          {
            "name": "sourceKind",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SourceKind"
            }
          }
        ],
        "operationId": "getDepositBalance",
        "description": "Get Deposit Balance For Source or Property\n",
        "tags": [
          "Deposits"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounting/v1.0/deposits/transactions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "page token"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Size of the page"
          },
          {
            "name": "showAll",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "description": "If set to false consumed and voided transactions won't be shown"
          },
          {
            "$ref": "#/components/parameters/depositTransactionsFilter"
          }
        ],
        "operationId": "getDepositTransactions",
        "description": "Get Deposit Transactions\n",
        "tags": [
          "Deposits"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedTransactionPaginated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/accounting/v1.0/trial-balance/report": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/propertyIdHeader"
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2024-07-21T00:00:00.000Z",
              "description": "Requested date",
              "format": "date"
            }
          }
        ],
        "operationId": "getTrialBalanceReport",
        "description": "Get Trial Balance Report for specific date\n",
        "tags": [
          "Trial balance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrialBalanceReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounting/v1.0/internal-transaction-codes": {
      "get": {
        "operationId": "getInternalTransactionCodes",
        "tags": [
          "Internal transaction codes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTransactionCodesListResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "GetAccountsReceivableLedgerTotalsFilterParameter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "explode": true,
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountsReceivableLedgerStatus"
              }
            }
          }
        }
      },
      "accountsReceivableLedgerFilter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "explode": true,
        "schema": {
          "type": "object",
          "properties": {
            "searchQuery": {
              "type": "string",
              "minLength": 1
            },
            "createdDateTimeFrom": {
              "type": "string",
              "format": "date-time"
            },
            "createdDateTimeTo": {
              "type": "string",
              "format": "date-time"
            },
            "balanceFrom": {
              "type": "integer",
              "format": "int64"
            },
            "balanceTo": {
              "type": "integer",
              "format": "int64"
            },
            "totalFrom": {
              "type": "integer",
              "format": "int64"
            },
            "totalTo": {
              "type": "integer",
              "format": "int64"
            },
            "paidFrom": {
              "type": "integer",
              "format": "int64"
            },
            "paidTo": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountsReceivableLedgerStatus"
              }
            },
            "sortBy": {
              "type": "string",
              "enum": [
                "status",
                "name",
                "created_at",
                "balance",
                "paid",
                "total"
              ],
              "x-enum-varnames": [
                "status",
                "name",
                "created_at",
                "balance",
                "paid",
                "total"
              ],
              "description": "Sort field"
            },
            "sortDirection": {
              "$ref": "#/components/schemas/sortDirection"
            },
            "pageToken": {
              "type": "string"
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "accountsReceivableLedgerTransactionsFilter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "explode": true,
        "schema": {
          "type": "object",
          "properties": {
            "searchQuery": {
              "type": "string",
              "minLength": 3
            },
            "transactionDateFrom": {
              "type": "string",
              "format": "date"
            },
            "transactionDateTo": {
              "type": "string",
              "format": "date"
            },
            "checkinDateFrom": {
              "type": "string",
              "format": "date"
            },
            "checkinDateTo": {
              "type": "string",
              "format": "date"
            },
            "checkoutDateFrom": {
              "type": "string",
              "format": "date"
            },
            "checkoutDateTo": {
              "type": "string",
              "format": "date"
            },
            "transactionType": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Enum of transaction types",
                "enum": [
                  "TRANSFER",
                  "UNDO_TRANSFER",
                  "PAYMENT"
                ]
              }
            },
            "userId": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "sortBy": {
              "type": "string",
              "enum": [
                "CHECKOUT_DATE",
                "CHECKIN_DATE",
                "TRANSACTION_DATE",
                "AMOUNT"
              ],
              "description": "Sort field"
            },
            "sortDirection": {
              "$ref": "#/components/schemas/sortDirection"
            }
          }
        }
      },
      "depositTransactionsFilter": {
        "name": "filter",
        "in": "query",
        "required": false,
        "explode": true,
        "schema": {
          "type": "object",
          "properties": {
            "reservationId": {
              "type": "integer",
              "format": "int64"
            },
            "transactionDateFrom": {
              "type": "string",
              "format": "date"
            },
            "transactionDateTo": {
              "type": "string",
              "format": "date"
            },
            "checkinDateFrom": {
              "type": "string",
              "format": "date"
            },
            "checkinDateTo": {
              "type": "string",
              "format": "date"
            },
            "checkoutDateFrom": {
              "type": "string",
              "format": "date"
            },
            "checkoutDateTo": {
              "type": "string",
              "format": "date"
            },
            "reservationStatus": {
              "$ref": "#/components/schemas/ReservationStatus"
            },
            "userId": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "sortBy": {
              "type": "string",
              "enum": [
                "CHECKOUT_DATE",
                "CHECKIN_DATE",
                "TRANSACTION_DATE",
                "AMOUNT",
                "RESERVATION_STATUS"
              ],
              "description": "Sort field"
            },
            "sortDirection": {
              "$ref": "#/components/schemas/sortDirection"
            }
          }
        }
      },
      "propertyId": {
        "name": "propertyId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "description": "Property id"
      },
      "propertyIdHeader": {
        "name": "X-Property-ID",
        "in": "header",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "description": "Property id"
      },
      "apiVersion": {
        "name": "apiVersion",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "v1.0"
          ]
        },
        "description": "API Version"
      },
      "accountsReceivableLedgerId": {
        "name": "accountsReceivableLedgerId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "description": "Accounts Receivable ID"
      },
      "reservationId": {
        "name": "reservationId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "description": "Reservation ID"
      },
      "TransactionState": {
        "name": "transactionStates",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionState"
          }
        },
        "description": "transaction states"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiAccountingError"
            }
          }
        }
      },
      "403": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiAccountingError"
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiAccountingError"
            }
          }
        }
      }
    },
    "schemas": {
      "ApiAccountingError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "errorCode": {
            "$ref": "#/components/schemas/ApiErrorCode"
          },
          "errorDetails": {
            "type": "string"
          }
        }
      },
      "AccountsReceivableLedgerStatus": {
        "type": "string",
        "enum": [
          "OPEN",
          "CLOSED"
        ]
      },
      "TransactionState": {
        "type": "string",
        "enum": [
          "POSTED",
          "PENDING"
        ]
      },
      "AccountsReceivableLedgerName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "AccountsReceivableLedgerDescription": {
        "type": "string",
        "minLength": 0,
        "maxLength": 200
      },
      "ApiErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN_ERROR",
          "UNEXPECTED_ERROR",
          "ACCESS_DENIED",
          "INVALID_REQUEST",
          "NOT_UNIQUE_VALUE",
          "INVALID_USER_INFORMATION",
          "ENTITY_NOT_FOUND",
          "ACCOUNTS_RECEIVABLE_LEDGER_FEATURE_DISABLED",
          "BOOKING_NOT_FOUND",
          "ACCOUNTS_RECEIVABLE_LEDGER_NOT_FOUND",
          "ACCOUNTS_RECEIVABLE_LEDGER_STATUS_ERROR",
          "BOOKING_STATUS_ERROR"
        ]
      },
      "sortDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "x-enum-varnames": [
          "asc",
          "desc"
        ],
        "description": "Direction for sort - asc or desc"
      },
      "Actions": {
        "type": "array",
        "description": "Returns the list of actions available for the transaction",
        "items": {
          "$ref": "#/components/schemas/Action"
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of Action"
          },
          "parameters": {
            "type": "object",
            "description": "Parameters required for the action, can be any object.\n",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the user."
          },
          "firstName": {
            "type": "string",
            "description": "The name of the user."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user."
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "type": {
            "type": "string",
            "enum": [
              "REAL_USER",
              "SYSTEM_USER",
              "UNKNOWN_USER"
            ],
            "description": "REAL_USER - user was found, UNKNOWN_USER - user was not found, SYSTEM_USER - user_id = 0 OR null"
          }
        }
      },
      "CustomGeneralLedgerCodeModel": {
        "type": "object",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "group": {
            "type": "string",
            "enum": [
              "payments",
              "products",
              "reservations",
              "taxes_fees"
            ]
          },
          "archived": {
            "default": false,
            "type": "boolean"
          }
        }
      },
      "CustomTransactionCodesModel": {
        "type": "object",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "sku": {
            "type": "string",
            "minLength": 1
          },
          "itemGroup": {
            "type": "string",
            "enum": [
              "items_services",
              "reservations",
              "taxes_fees",
              "payments",
              "accrual_accounting"
            ]
          },
          "customGeneralLedgerCodeId": {
            "type": "string"
          }
        }
      },
      "CustomTransactionCodesUpdateModel": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "customGeneralLedgerCodeId": {
            "type": "string"
          }
        }
      },
      "CustomGeneralLedgerCodesUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomGeneralLedgerCodeModel"
            }
          }
        }
      },
      "CustomTransactionCodesUpdateRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomTransactionCodesUpdateModel"
            }
          }
        }
      },
      "TransactionItemMappingModel": {
        "type": "object",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "sku": {
            "type": "string",
            "minLength": 1
          },
          "itemGroup": {
            "type": "string",
            "enum": [
              "items_services",
              "reservations",
              "taxes_fees",
              "payments",
              "accrual_accounting"
            ]
          },
          "accountId": {
            "type": "string"
          }
        }
      },
      "TransactionItemMappingUpdateModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "accountId": {
            "type": "string"
          }
        }
      },
      "TransactionItemMappingRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionItemMappingUpdateModel"
            }
          }
        }
      },
      "ListTransactionsRequest": {
        "type": "object",
        "required": [
          "filters"
        ],
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "pageToken": {
            "type": "string"
          },
          "limit": {
            "description": "Optional parameter. Default value is 100, maximum value is 1100.",
            "default": 100,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        }
      },
      "ListTransactionsPaginated": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionResponse"
            }
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/NextPageToken"
          }
        }
      },
      "AccountsReceivableLedgerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "status": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerStatus"
          },
          "propertyId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "paid": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Created datetime (ISO 8601) in UTC"
          },
          "updatedAt": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Updated datetime (ISO 8601) in UTC"
          }
        }
      },
      "AccountsReceivableLedgerPostRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerName"
          },
          "description": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerDescription"
          }
        }
      },
      "AccountsReceivableLedgerPatchRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerName"
          },
          "description": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerDescription"
          },
          "status": {
            "$ref": "#/components/schemas/AccountsReceivableLedgerStatus"
          }
        }
      },
      "AccountsReceivableLedgerPaginated": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountsReceivableLedgerResponse"
            }
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/NextPageToken"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the transaction."
          },
          "propertyId": {
            "type": "string",
            "description": "Property ID where the transaction was created."
          },
          "internalTransactionCode": {
            "type": "string",
            "description": "Internal code for the transaction, managed by Cloudbeds."
          },
          "customTransactionCode": {
            "type": "string",
            "description": "Custom code for the transaction, managed by Property."
          },
          "generalLedgerCustomCode": {
            "type": "string",
            "description": "Custom code for general ledger, managed by Property."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the transaction."
          },
          "currency": {
            "type": "string",
            "description": "Currency (ISO code) applied to the amount of the transaction."
          },
          "customerId": {
            "type": "string",
            "description": "Id of the user who perform the transaction, also know as guest id."
          },
          "rootId": {
            "type": "string",
            "description": "Root Id of the transaction, it contains the id of the transaction that is related to it."
          },
          "parentId": {
            "type": "string",
            "description": "Id of the transaction that is parent of this one. For example Tax on top of a rate, tax on top of a fee, etc."
          },
          "sourceId": {
            "type": "string",
            "description": "Id of the source. It is related with the source_kind, so if sourceKind is RESERVATION, is the reservation id."
          },
          "subSourceId": {
            "type": "string",
            "description": "Id of the sub source. At the moment only for reservations that is the booking_room_id."
          },
          "sourceKind": {
            "$ref": "#/components/schemas/SourceKind"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "externalRelationId": {
            "type": "string",
            "description": "External relation id, for example if the transaction is a payment it will contain payment id."
          },
          "externalRelationKind": {
            "type": "string",
            "enum": [
              "ROOM",
              "PAYMENT",
              "ITEM",
              "ITEM_POS",
              "ADDON",
              "RESERVATION",
              "ACCOUNTS_RECEIVABLE",
              "ROOM_REVENUE",
              "TAX",
              "FEE",
              "ADJUSTMENT",
              "PAYMENT_FEE"
            ],
            "description": "Kind of the external relation id, for example if transaction is a payment it will contain PAYMENT."
          },
          "originId": {
            "type": "string",
            "description": "Id of origin of the transaction. For example if the transaction is created based on a rate, is the rate id."
          },
          "routedFrom": {
            "type": "string",
            "description": "Id of the transaction that was routed from. It can be null."
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of items purchased."
          },
          "description": {
            "type": "string",
            "description": "Description of the transaction."
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who created the transaction"
          },
          "sourceDatetime": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Date time the source was created. (ISO 8601) in UTC",
            "format": "date-time"
          },
          "transactionDatetime": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Date time when the transaction should be created at. (ISO 8601) in UTC",
            "format": "date-time"
          },
          "transactionDatetimePropertyTime": {
            "type": "string",
            "description": "Date time when the transaction should be created at base on the property timezone.",
            "format": "date-time"
          },
          "serviceDate": {
            "type": "string",
            "example": "2017-07-21T00:00:00.000Z",
            "description": "Date when the posted transaction was created (property time).",
            "format": "date"
          },
          "createdAt": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Date time when the transaction was inserted on the database. (ISO 8601) in UTC",
            "format": "date-time"
          }
        }
      },
      "ExtendedTransactionPaginated": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedTransactionResponse"
            }
          },
          "nextPageToken": {
            "$ref": "#/components/schemas/NextPageToken"
          }
        }
      },
      "ExtendedTransactionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the transaction."
          },
          "transactionDate": {
            "type": "string",
            "description": "Date time of the transaction.",
            "format": "date-time"
          },
          "reservationName": {
            "type": "string",
            "description": "reservation name."
          },
          "checkinDate": {
            "type": "string",
            "format": "date",
            "description": "Check in date."
          },
          "checkoutDate": {
            "type": "string",
            "format": "date",
            "description": "Check out date."
          },
          "amount": {
            "type": "number",
            "description": "amount of the transaction."
          },
          "reservationId": {
            "type": "string",
            "description": "Id of reservation"
          },
          "reservationIdentifier": {
            "type": "string",
            "description": "Identifier of reservation"
          },
          "internalTransactionCode": {
            "type": "string",
            "description": "Internal Transaction Code"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "notes": {
            "type": "string",
            "description": "Notes"
          },
          "folioId": {
            "type": "string",
            "description": "Folio ID"
          },
          "state": {
            "type": "string",
            "enum": [
              "VOIDED",
              "TRANSFERRED"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "posted": {
            "type": "boolean",
            "description": "Flag to mark if transaction is posted"
          },
          "user": {
            "$ref": "#/components/schemas/UserModel"
          },
          "actions": {
            "$ref": "#/components/schemas/Actions"
          }
        }
      },
      "DepositBalanceResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Balance in smallest unit according to the currency."
          }
        }
      },
      "AccountsReceivableLedgerTotalsResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "paid": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          }
        }
      },
      "AccountsReceivableLedgerReservationBalanceTransferResponse": {
        "type": "object",
        "properties": {
          "transaction": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Posted transaction id"
              },
              "amount": {
                "type": "number"
              }
            }
          },
          "accountsReceivableId": {
            "type": "string"
          }
        }
      },
      "TransferDepositPostRequest": {
        "type": "object",
        "properties": {
          "transaction_ids": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "description": "List of transaction ids for transferring a deposit"
            }
          }
        }
      },
      "AsyncEventResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Id of event which will be processed asynchronous."
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of account"
          },
          "description": {
            "type": "string",
            "description": "Description of the account"
          },
          "name": {
            "type": "string",
            "description": "Name of the account"
          },
          "category": {
            "$ref": "#/components/schemas/AccountCategory"
          },
          "chartOfAccountType": {
            "$ref": "#/components/schemas/ChartOfAccountType"
          }
        }
      },
      "SourceKind": {
        "type": "string",
        "enum": [
          "RESERVATION",
          "HOUSE_ACCOUNT",
          "GROUP_PROFILE",
          "ACCOUNTS_RECEIVABLE_LEDGER"
        ],
        "description": "Source Kind. At the moment only available RESERVATION | GROUP_PROFILE | HOUSE_ACCOUNT | ACCOUNTS_RECEIVABLE."
      },
      "AccountCategory": {
        "type": "string",
        "enum": [
          "DEPOSITS"
        ],
        "description": "Account category"
      },
      "ChartOfAccountType": {
        "type": "string",
        "enum": [
          "LIABILITIES",
          "REVENUE",
          "ASSETS",
          "EQUITY",
          "EXPENSES"
        ],
        "description": "Chart of account type"
      },
      "InternalTransactionCodeGroupEnum": {
        "enum": [
          "ROOM_REVENUE_RATE",
          "ROOM_REVENUE_MANUAL",
          "ROOM_REVENUE_CANCELLATION",
          "ROOM_REVENUE_NO_SHOW",
          "ITEM_SERVICE",
          "ADDON",
          "CUSTOM_ITEM",
          "FEE",
          "TAX",
          "PAYMENT",
          "ACCOUNTS_RECEIVABLE",
          "N_A"
        ]
      },
      "InternalTransactionCodeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/InternalTransactionCodeGroupEnum"
          }
        }
      },
      "InternalTransactionCodesListResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransactionCodeResponse"
            }
          }
        }
      },
      "TrialBalanceRequest": {
        "type": "object",
        "properties": {
          "depositsLedgerOpeningBalance": {
            "type": "number"
          },
          "accountsReceivableLedgerOpeningBalance": {
            "type": "number"
          },
          "guestLedgerOpeningBalance": {
            "type": "number"
          }
        },
        "required": [
          "depositsLedgerOpeningBalance",
          "accountsReceivableLedgerOpeningBalance",
          "guestLedgerOpeningBalance"
        ]
      },
      "TrialBalanceResponse": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date of the trial balance.",
            "format": "date"
          },
          "depositsLedgerOpeningBalance": {
            "type": "integer",
            "format": "int64"
          },
          "accountsReceivableLedgerOpeningBalance": {
            "type": "integer",
            "format": "int64"
          },
          "guestLedgerOpeningBalance": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TrialBalanceConfigurationStatusResponse": {
        "type": "object",
        "properties": {
          "configuredAt": {
            "type": "string",
            "example": "2017-07-21T17:32:28.000Z",
            "description": "Configured datetime (ISO 8601) in UTC"
          },
          "configured": {
            "type": "boolean",
            "description": "True if this property has configured trial balance.\n"
          }
        }
      },
      "TrialBalanceReportResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/TrialBalanceReportSummary"
          },
          "ledgerBalances": {
            "$ref": "#/components/schemas/TrialBalanceReportLedgerBalances"
          },
          "guestLedger": {
            "$ref": "#/components/schemas/TrialBalanceReportGuestLedger"
          }
        }
      },
      "TrialBalanceReportSummary": {
        "type": "object",
        "properties": {
          "openingBalance": {
            "type": "number"
          },
          "transactionsTotalAmount": {
            "type": "number"
          },
          "depositActivity": {
            "type": "number"
          },
          "arPayments": {
            "type": "number"
          },
          "closingBalance": {
            "type": "number"
          }
        }
      },
      "TrialBalanceReportLedgerBalances": {
        "type": "object",
        "properties": {
          "depositLedger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          },
          "guestLedger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          },
          "accountsReceivable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          }
        }
      },
      "TrialBalanceReportGuestLedger": {
        "type": "object",
        "properties": {
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrialBalanceReportCodeInfo"
            }
          }
        }
      },
      "TrialBalanceReportCodeInfo": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Transaction code"
          },
          "description": {
            "type": "string",
            "description": "Description of the row",
            "enum": [
              "RATE",
              "RATE_A",
              "ROOM_REVENUE",
              "ROOM_REVENUE_A",
              "CANCELLATION",
              "CANCELLATION_A",
              "NO_SHOW",
              "NO_SHOW_A",
              "ITEM_SERVICE",
              "ITEM_SERVICE_A",
              "ADDON",
              "ADDON_A",
              "CUSTOM_ITEM_POS",
              "CUSTOM_ITEM_POS_A",
              "FEE",
              "FEE_A",
              "TAX",
              "TAX_A",
              "PAYMENT",
              "PAYMENT_R",
              "PAYMENT_CASH",
              "PAYMENT_BANK",
              "PAYMENT_CARD",
              "REFUND",
              "REFUND_CASH",
              "REFUND_BANK",
              "REFUND_CARD",
              "DEPOSIT_LEDGER_BALANCE",
              "DEPOSIT_LEDGER_BALANCE_PREVIOUS_DAY",
              "DEPOSIT_PAYMENTS",
              "DEPOSIT_TRANSFER_OUT",
              "GUEST_LEDGER_BALANCE",
              "GUEST_LEDGER_BALANCE_PREVIOUS_DAY",
              "GUEST_LEDGER_CHARGES",
              "DEPOSIT_TRANSFER_IN",
              "GUEST_LEDGER_PAYMENTS",
              "AR_BALANCE",
              "AR_BALANCE_PREVIOUS_DAY",
              "AR_TRANSFER_IN",
              "AR_PAYMENTS"
            ]
          },
          "amount": {
            "type": "number",
            "description": "Total amount for specific code"
          }
        }
      },
      "LogicalOperator": {
        "type": "string",
        "default": "and",
        "enum": [
          "and",
          "or"
        ],
        "x-enum-varnames": [
          "and",
          "or"
        ]
      },
      "ReservationStatus": {
        "type": "string",
        "description": "Enum of reservation statuses",
        "enum": [
          "checked_out",
          "checked_in",
          "confirmed",
          "canceled",
          "not_confirmed",
          "inquiry",
          "deleted",
          "no_show"
        ],
        "x-enum-varnames": [
          "checked_out",
          "checked_in",
          "confirmed",
          "canceled",
          "not_confirmed",
          "inquiry",
          "deleted",
          "no_show"
        ]
      },
      "ConditionalOperator": {
        "type": "string",
        "enum": [
          "greater_than_or_equal",
          "greater_than",
          "less_than_or_equal",
          "less_than",
          "equals",
          "not_equals",
          "in",
          "not_in",
          "contains",
          "not_contains",
          "is_null",
          "not_null"
        ],
        "x-enum-varnames": [
          "greater_than_or_equal",
          "greater_than",
          "less_than_or_equal",
          "less_than",
          "equals",
          "not_equals",
          "in",
          "not_in",
          "contains",
          "not_contains",
          "is_null",
          "not_null"
        ]
      },
      "FieldFilter": {
        "type": "object",
        "required": [
          "operator",
          "field"
        ],
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/ConditionalOperator"
          },
          "value": {
            "type": "object"
          },
          "field": {
            "type": "string"
          }
        }
      },
      "Filters": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AndOrGroup"
          },
          {
            "$ref": "#/components/schemas/FieldFilter"
          }
        ]
      },
      "AndOrGroup": {
        "type": "object",
        "properties": {
          "and": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AndOrGroup"
                },
                {
                  "$ref": "#/components/schemas/FieldFilter"
                }
              ]
            }
          },
          "or": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AndOrGroup"
                },
                {
                  "$ref": "#/components/schemas/FieldFilter"
                }
              ]
            }
          }
        }
      },
      "Sort": {
        "type": "object",
        "required": [
          "field",
          "direction"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/sortDirection"
          }
        }
      },
      "PageDetails": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NextPageToken": {
        "type": "string",
        "description": "Token for fetching the next page of results"
      }
    }
  }
}